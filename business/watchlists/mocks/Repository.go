// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	watchlists "go-watchlist/business/watchlists"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: userID, domain
func (_m *Repository) Create(userID int, domain *watchlists.Domain) (watchlists.Domain, error) {
	ret := _m.Called(userID, domain)

	var r0 watchlists.Domain
	if rf, ok := ret.Get(0).(func(int, *watchlists.Domain) watchlists.Domain); ok {
		r0 = rf(userID, domain)
	} else {
		r0 = ret.Get(0).(watchlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *watchlists.Domain) error); ok {
		r1 = rf(userID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserID provides a mock function with given fields: userID
func (_m *Repository) GetAllByUserID(userID int) ([]watchlists.Domain, error) {
	ret := _m.Called(userID)

	var r0 []watchlists.Domain
	if rf, ok := ret.Get(0).(func(int) []watchlists.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]watchlists.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: userID, watchlistId
func (_m *Repository) GetByID(userID int, watchlistId int) (watchlists.Domain, error) {
	ret := _m.Called(userID, watchlistId)

	var r0 watchlists.Domain
	if rf, ok := ret.Get(0).(func(int, int) watchlists.Domain); ok {
		r0 = rf(userID, watchlistId)
	} else {
		r0 = ret.Get(0).(watchlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, watchlistId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMedia provides a mock function with given fields: watchlistId, mediaID
func (_m *Repository) InsertMedia(watchlistId int, mediaID int) (watchlists.Domain, error) {
	ret := _m.Called(watchlistId, mediaID)

	var r0 watchlists.Domain
	if rf, ok := ret.Get(0).(func(int, int) watchlists.Domain); ok {
		r0 = rf(watchlistId, mediaID)
	} else {
		r0 = ret.Get(0).(watchlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(watchlistId, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMedia provides a mock function with given fields: userID, watchlistID, mediaID
func (_m *Repository) UpdateMedia(userID int, watchlistID int, mediaID int) (watchlists.Domain, error) {
	ret := _m.Called(userID, watchlistID, mediaID)

	var r0 watchlists.Domain
	if rf, ok := ret.Get(0).(func(int, int, int) watchlists.Domain); ok {
		r0 = rf(userID, watchlistID, mediaID)
	} else {
		r0 = ret.Get(0).(watchlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(userID, watchlistID, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
