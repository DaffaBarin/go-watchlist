// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	medias "go-watchlist/business/medias"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: domain
func (_m *Service) Create(domain *medias.Domain) (medias.Domain, error) {
	ret := _m.Called(domain)

	var r0 medias.Domain
	if rf, ok := ret.Get(0).(func(*medias.Domain) medias.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(medias.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*medias.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Service) GetAll() ([]medias.Domain, error) {
	ret := _m.Called()

	var r0 []medias.Domain
	if rf, ok := ret.Get(0).(func() []medias.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medias.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Service) GetByID(id int) (medias.Domain, error) {
	ret := _m.Called(id)

	var r0 medias.Domain
	if rf, ok := ret.Get(0).(func(int) medias.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(medias.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
